type OptionsFactory @entity {
  id: ID!

  optionsExchangeAddress: Bytes!

  owner: Bytes!

  actions: [FactoryAction!] @derivedFrom(field: "factory")
}

#
# Factory Action
#
interface FactoryAction {
  " Equals to: <actionType>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsFactory the action is related to"
  factory: OptionsFactory

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type OptionsContractCreated implements FactoryAction @entity {
  " Equals to: <OPTIONS-CREATED>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsFactory the action is related to"
  factory: OptionsFactory

  " OptionsContract address "
  address: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type AssetAdded implements FactoryAction @entity {
  " Equals to: <ASSET-ADDED>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsFactory the action is related to"
  factory: OptionsFactory

  " Asset name "
  asset: String!

  " Asset address "
  address: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type AssetChanged implements FactoryAction @entity {
  " Equals to: <ASSET-CHANGED>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsFactory the action is related to"
  factory: OptionsFactory

  " Asset name "
  asset: String!

  " Previous Asset address "
  oldAddress: Bytes!

  " New Asset address "
  newAddress: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type AssetDeleted implements FactoryAction @entity {
  " Equals to: <ASSET-DELETED>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsFactory the action is related to"
  factory: OptionsFactory

  " Asset name "
  asset: String!

  " Asset address "
  address: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type FactoryOwnershipTransferred implements FactoryAction @entity {
  " Equals to: <OWNERSHIP-TRANFERRED>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsFactory the action is related to"
  factory: OptionsFactory

  " Previous owner address "
  oldOwner: Bytes!

  " New owner number "
  newOwner: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type SupportedAsset @entity {
  " Equals to: Asset Name "
  id: ID!

  " Asset name"
  asset: String!

  " Asset Address "
  address: Bytes!
}

type OptionsContract @entity {
  " Equals to: Contract address "
  id: ID!

  " OptionsContract address"
  address: Bytes!

  " Contract owner address"
  owner: Bytes!

  " The incentive paid to liquidator - Value "
  liquidationIncentiveValue: BigInt!

  " The incentive paid to liquidator - Exponent "
  liquidationIncentiveExp: BigInt!

  " The fees paid to our protocol every time a execution happens - Value "
  transactionFeeValue: BigInt!

  " The fees paid to our protocol every time a execution happens - Exponent "
  transactionFeeExp: BigInt!

  " Max amount that a Vault can be liquidated by - Value "
  liquidationFactorValue: BigInt!

  " Max amount that a Vault can be liquidated by - Exponent "
  liquidationFactorExp: BigInt!

  " The fees paid to our protocol every time a liquidation happens - Value "
  liquidationFeeValue: BigInt!

  " The fees paid to our protocol every time a liquidation happens - Exponent "
  liquidationFeeExp: BigInt!

  " The minimum ratio of a vault's collateral to insurance promised - Value "
  minCollateralizationRatioValue: BigInt!

  " The minimum ratio of a vault's collateral to insurance promised - Exponent "
  minCollateralizationRatioExp: BigInt!

  " The amount of underlying that 1 oToken protects - Value "
  oTokenExchangeRateValue: BigInt!

  " The amount of underlying that 1 oToken protects - Exponent "
  oTokenExchangeRateExp: BigInt!

  " The amount of insurance promised per oToken - Value "
  strikePriceValue: BigInt!

  " The amount of insurance promised per oToken - Exponent "
  strikePriceExp: BigInt!

  " The time of expiry of the options contract "
  expiry: BigInt!

  " The collateral asset "
  collateral: Bytes!

  " The asset that is being protected "
  underlying: Bytes!

  " The asset in which the insurance is calculated "
  strike: Bytes!

  " The total collateral added to this OptionsContract "
  totalCollateral: BigInt!

  " The total collateral liquidated from this OptionsContract "
  totalLiquidated: BigInt!

  " The total collateral withdrawn from the Options Contract every time the exercise function is called "
  totalExercised: BigInt!

  " The total amount of underlying that is added to the contract during the exercise window "
  totalUnderlying: BigInt!

  vaults: [Vault!] @derivedFrom(field: "optionsContract")

  actions: [OptionsContractAction!] @derivedFrom(field: "optionsContract")

  " Block number when the contract was created "
  block: BigInt!

  " Transaction hash (tx)  where the contract was created "
  transactionHash: Bytes!

  " Timestamp as seconds (time)  when the contract was created "
  timestamp: BigInt!

  # ERC20
  " Total number of events (all types)"
  eventCount: BigInt!

  " Total number of burn events "
  burnEventCount: BigInt!

  " Total number of mint events "
  mintEventCount: BigInt!

  " Total number of transfer events "
  transferEventCount: BigInt!

  " Total token supply "
  totalSupply: BigDecimal!

  " Total token burned "
  totalBurned: BigDecimal!

  " Total token minted "
  totalMinted: BigDecimal!

  " Total token transferred "
  totalTransferred: BigDecimal!

  " List of token events "
  events: [TokenEvent!]! @derivedFrom(field: "token")
}

#
# OptionsContract Actions
#
interface OptionsContractAction {
  " Equals to: <actionType>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsContract the action is related to"
  optionsContract: OptionsContract

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type VaultOpened implements OptionsContractAction @entity {
  " Equals to: <VAULT-OPENED>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsContract the action is related to"
  optionsContract: OptionsContract

  " Vault owner address "
  owner: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type Exercise implements OptionsContractAction @entity {
  " Equals to: <EXERCISE>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsContract the action is related to"
  optionsContract: OptionsContract

  " Exerciser address "
  exerciser: Bytes!

  " Amount of underlying paid by the exerciser "
  amtUnderlyingToPay: BigInt!

  " Amount of collateral paid by to exerciser "
  amtCollateralToPay: BigInt!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type TransferFee implements OptionsContractAction @entity {
  " Equals to: <TRANSFER-FEE>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsContract the action is related to"
  optionsContract: OptionsContract

  " To whom the fee is transfered "
  to: Bytes!

  " Fees amount "
  fees: BigInt!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type OptionsContractOwnershipTransferred implements OptionsContractAction @entity {
  " Equals to: <OWNERSHIP-TRANFERRED>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsContract the action is related to"
  optionsContract: OptionsContract

  " Previous owner address "
  oldOwner: Bytes!

  " New owner number "
  newOwner: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type UpdateParameters implements OptionsContractAction @entity {
  " Equals to: <UPDATE-PARAMETERS>-<transactionHash>-<logIndex> "
  id: ID!

  " OptionsContract the action is related to"
  optionsContract: OptionsContract

  " The incentive paid to liquidator "
  liquidationIncentive: BigInt!

  " Max amount that a Vault can be liquidated by "
  liquidationFactor: BigInt!

  " The fees paid to our protocol every time a liquidation happens "
  liquidationFee: BigInt!

  " The fees paid to our protocol every time a execution "
  transactionFee: BigInt!

  " The minimum ratio of a Vault's collateral to insurance promised "
  minCollateralizationRatio: BigInt!

  " Onwer address who performed the action "
  owner: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type Vault @entity {
  " Equals to: <OptionsContract address>-<owner address> "
  id: ID!

  " Vault Owner"
  owner: Bytes!

  " OptionsContract the Vault is related to"
  optionsContract: OptionsContract!

  " Amount of oTokens issued "
  oTokensIssued: BigInt!

  "  Collateral added by this vault "
  collateral: BigInt!

  actions: [VaultAction!] @derivedFrom(field: "vault")
}

#
# Vault Actions
#
interface VaultAction {
  " Equals to: <actionType>-<transactionHash>-<logIndex> "
  id: ID!

  " Vault the action is related to"
  vault: Vault

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type ETHCollateralAdded implements VaultAction @entity {
  " Equals to: <ETH-COLLATERAL-ADDED>-<transactionHash>-<logIndex> "
  id: ID!

  " Vault the action is related to"
  vault: Vault

  " Amount of collateral added "
  amount: BigInt!

  " Address of payer  "
  payer: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type ERC20CollateralAdded implements VaultAction @entity {
  " Equals to: <ERC20-COLLATERAL-ADDED>-<transactionHash>-<logIndex> "
  id: ID!

  " Vault the action is related to"
  vault: Vault

  " Amount of collateral added "
  amount: BigInt!

  " Address of payer  "
  payer: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type RemoveCollateral implements VaultAction @entity {
  " Equals to: <REMOVE-COLLATERAL>-<transactionHash>-<logIndex> "
  id: ID!

  " Vault the action is related to"
  vault: Vault

  " Amount of collateral removed "
  amount: BigInt!

  " Address of owner removing the collateral "
  owner: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type IssuedOToken implements VaultAction @entity {
  " Equals to: <ISSUED-OTOKENS>-<transactionHash>-<logIndex> "
  id: ID!

  " Vault the action is related to"
  vault: Vault

  " Amount of oTokens issued "
  amount: BigInt!

  " Address who receive the oTokens  "
  issuedTo: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type Liquidate implements VaultAction @entity {
  " Equals to: <LIQUIDATE>-<transactionHash>-<logIndex> "
  id: ID!

  " Vault the action is related to"
  vault: Vault

  " Amount of collateral paid to liquidator "
  collateralToPay: BigInt!

  " Address who liquidates the vault  "
  liquidator: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type ClaimedCollateral implements VaultAction @entity {
  " Equals to: <CLAIMED-COLLATERAL>-<transactionHash>-<logIndex> "
  id: ID!

  " Vault the action is related to"
  vault: Vault

  " Amount of collateral claimed "
  collateralClaimed: BigInt!

  " Amount of underlying claimed "
  underlyingClaimed: BigInt!

  " Address who claims the vault  "
  claimedBy: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type BurnOToken implements VaultAction @entity {
  " Equals to: <BURN-OTOKENS>-<transactionHash>-<logIndex> "
  id: ID!

  " Vault the action is related to"
  vault: Vault

  " Amount of oTokens burned "
  burned: BigInt!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type TransferVaultOwnership implements VaultAction @entity {
  " Equals to: <TRANSFER-VAULT-OWNERSHIP>-<transactionHash>-<logIndex> "
  id: ID!

  " Vault the action is related to"
  vault: Vault

  " Previous owner address "
  oldOwner: Bytes!

  " New owner number "
  newOwner: Bytes!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

#
# OptionsExchange actions
#
interface OptionsExchangeAction {
  " Equals to: <actionType>-<transactionHash>-<logIndex> "
  id: ID!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Timestamp as seconds (time) "
  timestamp: BigInt!
}

type SellOTokens implements OptionsExchangeAction @entity {
  " Equals to: <SELL-OTOKENS>-<transactionHash>-<logIndex> "
  id: ID!

  " Seller address "
  seller: Bytes!

  " The address to send the payout tokens back to "
  receiver: Bytes!

  " The address of the oToken to sell "
  oTokenAddress: Bytes!

  " The address of the token to receive the premiums in "
  payoutTokenAddress: Bytes!

  " The number of oTokens to sell "
  oTokensToSell: BigInt!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

type BuyOTokens implements OptionsExchangeAction @entity {
  " Equals to: <BUY-OTOKENS>-<transactionHash>-<logIndex> "
  id: ID!

  " Buyer address "
  buyer: Bytes!

  " he address to send the oTokens back to "
  receiver: Bytes!

  " The address of the oToken to buy "
  oTokenAddress: Bytes!

  " The address of the token to pay the premiums in "
  paymentTokenAddress: Bytes!

  " The number of oTokens to buy "
  oTokensToBuy: BigInt!

  " Block number "
  block: BigInt!

  " Transaction hash (tx) "
  transactionHash: Bytes!

  " Action timestamp as seconds (time) "
  timestamp: BigInt!
}

#
# Token events
#
interface TokenEvent {
  id: ID!
  token: OptionsContract!
  amount: BigDecimal!
  sender: Bytes!

  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type BurnEvent implements TokenEvent @entity {
  id: ID!

  " Token address "
  token: OptionsContract!

  " Quantity of tokens burned "
  amount: BigDecimal!

  " Transaction sender address "
  sender: Bytes!

  " Address of burner account "
  burner: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction hash "
  transaction: Bytes!
}

type MintEvent implements TokenEvent @entity {
  id: ID!

  " Token address "
  token: OptionsContract!

  " Quantity of tokens minted "
  amount: BigDecimal!

  " Transaction sender address "
  sender: Bytes!

  " Address of minter account "
  minter: Bytes!

  " Address of destination account "
  destination: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction hash "
  transaction: Bytes!
}

type TransferEvent implements TokenEvent @entity {
  id: ID!

  " Token address "
  token: OptionsContract!

  " Quantity of tokens transferred "
  amount: BigDecimal!

  " Transaction sender address "
  sender: Bytes!

  " Address of source account "
  source: Bytes!

  " Address of destination account "
  destination: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction hash "
  transaction: Bytes!
}

#
# Provides information about an Ethereum account
#
type Account @entity {
  " Equals to: <accountAddress>"
  id: ID!

  " Account address "
  address: Bytes!

  " Token balances that this account holds "
  balances: [AccountBalance!]! @derivedFrom(field: "account")
}

#
# Current token balance of a particular Ethereum account
#
type AccountBalance @entity {
  " Equals to: <accountAddress>-<tokenAddress>"
  id: ID!

  " Account address "
  account: Account!

  " Token address "
  token: OptionsContract!

  " Current account balance "
  amount: BigDecimal!

  " Block number in which the balance was last modified "
  block: BigInt

  " Last modified timestamp in seconds "
  modified: BigInt

  " Hash of the last transaction that modified the balance "
  transaction: Bytes
}
